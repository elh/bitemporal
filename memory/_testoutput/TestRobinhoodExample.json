{
  "TestName": "TestRobinhoodExample",
  "Passed": true,
  "Histories": {
    "user-1": [
      {
        "Key": "user-1",
        "Value": {
          "cash-balance": 90,
          "description": "Price Improvement"
        },
        "TxTimeStart": "2021-03-21T00:00:00Z",
        "TxTimeEnd": null,
        "ValidTimeStart": "2021-03-20T00:00:00Z",
        "ValidTimeEnd": null
      },
      {
        "Key": "user-1",
        "Value": {
          "cash-balance": 75,
          "description": "Stock Purchase"
        },
        "TxTimeStart": "2021-03-20T00:00:00Z",
        "TxTimeEnd": "2021-03-21T00:00:00Z",
        "ValidTimeStart": "2021-03-20T00:00:00Z",
        "ValidTimeEnd": null
      },
      {
        "Key": "user-1",
        "Value": {
          "cash-balance": 100,
          "description": "Deposit"
        },
        "TxTimeStart": "2021-03-20T00:00:00Z",
        "TxTimeEnd": null,
        "ValidTimeStart": "2021-03-14T00:00:00Z",
        "ValidTimeEnd": "2021-03-20T00:00:00Z"
      },
      {
        "Key": "user-1",
        "Value": {
          "cash-balance": 100,
          "description": "Deposit"
        },
        "TxTimeStart": "2021-03-14T00:00:00Z",
        "TxTimeEnd": "2021-03-20T00:00:00Z",
        "ValidTimeStart": "2021-03-14T00:00:00Z",
        "ValidTimeEnd": null
      }
    ]
  },
  "Description": "This is a recreation of the example in a Robinhood blog post: [Tracking Temporal Data at Robinhood](https://medium.com/robinhood-engineering/tracking-temporal-data-at-robinhood-b62291644a31).\n\n```\n// Say you deposit $100 in your account on 3/14.\nmar14 := mustParseTime(shortForm, \"2021-03-14\")\nrequire.Nil(t, clock.SetNow(mar14))\nrequire.Nil(t, db.Set(\"user-1\", Balance{\n\t\"cash-balance\": 100,\n\t\"description\":  \"Deposit\", // description of last event??\n}))\n\n// On 3/20, you purchase 1 share of ABC stock at $25.\nmar20 := mustParseTime(shortForm, \"2021-03-20\")\nrequire.Nil(t, clock.SetNow(mar20))\nrequire.Nil(t, db.Set(\"user-1\", Balance{\n\t\"cash-balance\": 75,\n\t\"description\":  \"Stock Purchase\",\n}))\n\n// On 3/21, Robinhood received a price improvement, indicating the execution for your 1 share of ABC was\n// actually $10.\nmar21 := mustParseTime(shortForm, \"2021-03-21\")\nrequire.Nil(t, clock.SetNow(mar21))\nrequire.Nil(t, db.Set(\"user-1\", Balance{\n\t\"cash-balance\": 90,\n\t\"description\":  \"Price Improvement\",\n}, WithValidTime(mar20)))\n```\nLet's query our bitemporal history. Hover over the diagram to see changes over valid and transaction time.\n```\n// Now let's check the price at interesting points. See the diagram below\nmar13 := mustParseTime(shortForm, \"2021-03-13\") // before any VT, TT\n// VT=now, TT=now. as of now\nassert.Equal(t, 90, findBalance())\n// VT=now, TT=3/20. before price correction\nassert.Equal(t, 75, findBalance(AsOfTransactionTime(mar20)))\n// VT=now, TT=3/14. before stock purchase\nassert.Equal(t, 100, findBalance(AsOfTransactionTime(mar14)))\n// VT=now, TT=3/13. before any record\nexpectErrGetBalance(AsOfTransactionTime(mar13))\n// VT=3/14, TT=now. 3/14 balance as of now\nassert.Equal(t, 100, findBalance(AsOfValidTime(mar14)))\n// VT=3/14, TT=3/20. 3/14 balance before price correction\nassert.Equal(t, 100, findBalance(AsOfTransactionTime(mar20), AsOfValidTime(mar14)))\n// VT=3/14, TT=3/14. 3/14 balance before stock purchase\nassert.Equal(t, 100, findBalance(AsOfTransactionTime(mar14), AsOfValidTime(mar14)))\n// VT=3/14, TT=3/13. 3/14 balance before any record\nexpectErrGetBalance(AsOfTransactionTime(mar13), AsOfValidTime(mar14))\n```"
}